01. 데이터/스택/힙 메모리
      데이터 영역 -> 코드 & 상수 영역
      스택 영역 -> 함수가 실행 되는 영역
      힙 영역 -> 인스턴스(클래스의 변수)가 생성되는 영역

      인스턴스: 클래스의 정의를 통해 만들어진 객체

02. 변수와 자료형
  자료형 - 기본자료형
    상수풀에서 자료를 불러옴.

    int 자바 기본 정수형
    double 자바 기본 실수형

    작은 자료형을 큰 자료형에 대입 -> 묵시적 형변환 
      - 데이터의 손실이 없기 때문에 문제가 안됨.

    덜 정밀한 자료형 -> 더 정밀한 자료형으로 대입
      - 정수형 -> 실수형
      byte - short - int -> long -> float > double

    명시적 형변환
      double num = 3.14 -> int
      int num1 = (int)num;

    Boolean

  자료형 - 참조 자료형  (힙 메모리)
    클래스 형태의 자료형
    Person Class

    Person person = new Person();

  인스턴스의 주소
    String text = new String("abc");
    (text 에는 new STring("abc") 인스턴스의 주소)

    String texst1 = "abc" (데이터영역 상수풀의 동일 주소)

03. 자바의 여러가지 연산자
  산술연산자
  비교연산자 (>,<,==)
  논리연산자 ( &&,||,!)
  대입 연산자
  복합 대입 연산자
    int num = 10
    num = num + 2; 
    num += 2;

  증감연산자(1씩 증가, 1씩 감소)

  삼항조건 연산자
    return (rs > 1) ? true:false;

04. 제어흐름 이해하기
  조건문 -> if, elseif, else
  선택문 -> switch, case, break, default
  반복문 -> 
    while (조건식) {

    } do { 
      // 조건식이 참이든 거짓이든 무조건 한번은 실행
    } 

    for(자료형 항목 : 배열) {

    }

05.클래스와 객체
  객체 -> 상호작용
    -> 속성(객체를 정의하는 특징)과 함수(행위 - 메서드)

  클래스 -> 객체의 정의
  class 클래스명 {
    자료형 변수명;

    반환자료형 함수명 (...) {

    }    
  }

  반환 자료형 함수명( 매개변수1, 매개변수2... ) {
    // 함수가 실행되는 영역
  }

  new 연산자
  class Person {
    접근제어자 int age;
    String name;

    void print() {

    }
  }

  Person person = new Person();

  마침표 연산자 -> 객체(인스턴스) 내부의 변수, 함수에 접근
  person.print();

  접근제어자
    public - 다른 패키지 포함 내부 외부 접근이 가능
    default(접근제어자 없을때) - 같은 패키지 안에서 접근 가능
    protected - default + private(상속)
    private - 같은 클래스 내부에서만 접근 가능

  다른 패키지에 접근 -> import

06. 클래스와 객체2
  클래스에서 정의되어 있는 변수 -> 멤버 변수 -> 인스턴스가 생성된 후에 접근이 가능 -> 인스턴스 변수

  멤버변수(인스턴스 변수) - 클래스에 정의되어 있는 변수 - 인스턴스가 만들어 졌을때 활성화(힙)

  지역변수 - 메서드 안에 정의되어 있는 변수(메서드가 실행될때, 함수 지역에서만 유효) -> 함수가 실행될때 활성화 (스택 영역)
  
  정적변수 - 클래스 변수에 static 예약어가 있는 변수 - 클래스 로더에 의해서 데이터 영역에 올라갔을때 활성화

  정적(static) <----> 동적
  (고정....)

  활성화 되는 순서
    정적변수 ->> 멤버변수 ->> 지역변수
             ->> 지역변수

  정적 메서드 
    -> 메서드명 앞에 static 예약어
    -> 인스턴스가 만들어지기 전에 접근이 가능

  생성자 -> 인스턴스 생성
    - 생성자 메서드
    - 클래스명과 동일한 메서드
    - 인스턴스를 생성
    - 반환값 X
    - 생성자 메서드를 지정하지 않으면 -> 컴파일시 자동으로 기본 생성자 메서드
      public 클래스명() {}
    - 멤버 변수의 초기화
    - 동일한 생성자 메서드 -> 매개변수 변경 -> 생성자 오버로드(메서드 오버로드)

    - this 
      1. 생성된 인스턴스의 주소를 내부에서 접근할때
      2. this() -> 클래스 내부에서 생성자를 호출할때.

  싱글톤 패턴
  (SingleTpme ...)
    1. 기본 생성자 private
    2. 내부에서 인스턴스 생성(private static ...)
    3. 내부에서 생성한 인스턴스를 조회할 수 있는 public 정적 메서드(외부에서 생성 X)

07 배열과 ArrayList
  배열
    - 같은 자료형 -> 물리적, 연속적으로 나열
    자료형[] 변수명 = new 자료형[공간의 개수]
    자료형 변수명[] = 
    자료형[] 변수명 = {값,값,값}

    변수명 [위치 인덱스 번호] // 0


    참조 자료형 = null

08 상속과 다형성
  자식클래스 extends 부모 클래스

09 추상클래스 (Abstract)
  1.추상적(정해지지않음) <-----> 구현됨(정해짐)
    - 메서드의 구현부분{}이 정의되지 않음.
    - 하위 클래스가 반드시 구현을 해야함
  2.공통적()